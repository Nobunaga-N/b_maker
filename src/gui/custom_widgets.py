from PyQt6.QtWidgets import (
    QDialog, QLabel, QVBoxLayout, QLineEdit, QPushButton,
    QGroupBox, QHBoxLayout, QSpinBox, QDoubleSpinBox,
    QComboBox, QCheckBox, QTableWidget, QHeaderView,
    QTableWidgetItem, QFileDialog, QMessageBox, QTabWidget,
    QWidget, QFrame, QScrollArea, QFormLayout, QToolButton
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QIcon, QFont

import os
import json
from typing import Dict, List, Any, Optional

from src.utils.style_constants import (
    MODULE_ITEM_STYLE, TOOL_BUTTON_STYLE, ACTIVITY_CANVAS_STYLE,
    ACTIVITY_DIALOG_STYLE, ACTIVITY_MODULE_TITLE_STYLE, MODULE_BUTTON_STYLE
)
from src.utils.ui_factory import (
    create_tool_button, create_accent_button, create_dark_button,
    create_group_box, create_double_spinbox_without_buttons,
    create_text_label, create_spinbox_without_buttons, create_button
)
from src.utils.resources import Resources
from src.gui.modules.canvas_module import CanvasModule, ModuleItem
from src.gui.dialog_modules import ClickModuleDialog, SwipeModuleDialog
from src.gui.modules.image_search_module_improved import ImageSearchModuleDialog


class ModuleListItem:
    """
    Class for representing a module in the module list.
    Used by CreateBotPage to store module information.
    """

    def __init__(self, module_type: str, display_text: str, data: Dict[str, Any]):
        self.module_type = module_type
        self.display_text = display_text
        self.data = data


class ModuleItem(QFrame):
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–æ–¥—É–ª—è —Å –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –≤–∏–¥–∂–µ—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    editRequested = pyqtSignal(int)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å –∏–Ω–¥–µ–∫—Å–æ–º)
    deleteRequested = pyqtSignal(int)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è (—Å –∏–Ω–¥–µ–∫—Å–æ–º)
    moveUpRequested = pyqtSignal(int)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤–≤–µ—Ä—Ö
    moveDownRequested = pyqtSignal(int)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤–Ω–∏–∑

    def __init__(self, index: int, module_type: str, description: str, parent=None):
        super().__init__(parent)
        self.index = index
        self.module_type = module_type
        self.description = description
        self.data = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –º–æ–¥—É–ª—è"""
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
        self.setStyleSheet(MODULE_ITEM_STYLE)

        # –û—Å–Ω–æ–≤–Ω–æ–π –ª–µ–π–∞—É—Ç —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(4, 4, 4, 4)
        main_layout.setSpacing(2)

        # –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å —Ç–∏–ø–æ–º –º–æ–¥—É–ª—è –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        top_layout = QHBoxLayout()
        top_layout.setContentsMargins(0, 0, 0, 0)
        top_layout.setSpacing(2)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–º–µ—Ä –º–æ–¥—É–ª—è –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.number_label = QLabel(f"{self.index + 1}.")
        self.number_label.setStyleSheet("color: #FFA500; font-weight: bold; min-width: 20px;")
        top_layout.addWidget(self.number_label)

        # –¢–∏–ø –º–æ–¥—É–ª—è (–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ—Ä–∞–Ω–∂–µ–≤—ã–º —Ü–≤–µ—Ç–æ–º)
        type_label = QLabel(self.module_type)
        type_label.setStyleSheet("font-weight: bold; color: #FFA500;")
        top_layout.addWidget(type_label)

        top_layout.addStretch(1)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–∂–¥—É —Ç–∏–ø–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ)
        self.move_up_btn = create_tool_button("‚Üë", "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö",
                                              lambda: self._move_up_requested())
        self.move_down_btn = create_tool_button("‚Üì", "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑",
                                                lambda: self._move_down_requested())
        self.edit_btn = create_tool_button("üñâ", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                                           lambda: self._edit_requested())
        self.delete_btn = create_tool_button("‚úï", "–£–¥–∞–ª–∏—Ç—å",
                                             lambda: self._delete_requested())

        top_layout.addWidget(self.move_up_btn)
        top_layout.addWidget(self.move_down_btn)
        top_layout.addWidget(self.edit_btn)
        top_layout.addWidget(self.delete_btn)

        main_layout.addLayout(top_layout)

        # –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è —Å –º–µ–Ω—å—à–∏–º —à—Ä–∏—Ñ—Ç–æ–º –∏ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
        desc_label = QLabel(self.description)
        desc_label.setWordWrap(True)
        desc_label.setStyleSheet("font-size: 11px; color: #CCCCCC; margin-left: 4px;")
        desc_label.setTextInteractionFlags(Qt.TextInteractionFlag.TextSelectableByMouse)
        main_layout.addWidget(desc_label)

    def _move_up_requested(self):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —ç–º–∏—Å—Å–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ moveUpRequested"""
        self.moveUpRequested.emit(self.index)

    def _move_down_requested(self):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —ç–º–∏—Å—Å–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ moveDownRequested"""
        self.moveDownRequested.emit(self.index)

    def _edit_requested(self):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —ç–º–∏—Å—Å–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ editRequested"""
        self.editRequested.emit(self.index)

    def _delete_requested(self):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —ç–º–∏—Å—Å–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ deleteRequested"""
        self.deleteRequested.emit(self.index)

    def set_data(self, data: dict):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞"""
        self.data = data

    def get_data(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        return self.data

    def update_index(self, new_index: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å –º–æ–¥—É–ª—è –∏ –µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        self.index = new_index
        self.number_label.setText(f"{new_index + 1}.")


class ActivityCanvasModule(CanvasModule):
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ö–æ–ª—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    –ë–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –º–æ–¥—É–ª–µ–π.
    """

    def __init__(self, parent=None):
        super().__init__("", parent)  # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç.–∫. –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ –¥–∏–∞–ª–æ–≥–µ
        self.setStyleSheet(ACTIVITY_CANVAS_STYLE)
        self.modules = []  # –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –Ω–∞ —Ö–æ–ª—Å—Ç–µ

    def create_tool_buttons(self, layout):
        """Creates tool buttons for the activity canvas"""
        # –°–æ–∑–¥–∞–µ–º toolbar –¥–ª—è –∫–Ω–æ–ø–æ–∫
        toolbar = QHBoxLayout()
        toolbar.setContentsMargins(0, 0, 0, 0)
        toolbar.setSpacing(4)

        # –ì—Ä—É–ø–ø–∞ 1: –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        basic_group = create_group_box("–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
        basic_group.setStyleSheet(basic_group.styleSheet() + "QGroupBox { color: #FFA500; }")
        basic_layout = QHBoxLayout(basic_group)
        basic_layout.setContentsMargins(4, 16, 4, 4)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        basic_layout.setSpacing(4)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã
        self.btn_close_game = self._create_command_button("close.game", "–ó–∞–∫—Ä—ã—Ç—å –∏–≥—Ä—É",
                                                          Resources.get_icon_path("stop-red"),
                                                          self.add_close_game_module)
        self.btn_restart_emulator = self._create_command_button("restart.emulator", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä",
                                                                Resources.get_icon_path("activity-blue"),
                                                                self.add_restart_emulator_module)
        self.btn_start_game = self._create_command_button("start.game", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É",
                                                          Resources.get_icon_path("continue-green"),
                                                          self.add_start_game_module)

        basic_layout.addWidget(self.btn_close_game)
        basic_layout.addWidget(self.btn_restart_emulator)
        basic_layout.addWidget(self.btn_start_game)
        toolbar.addWidget(basic_group)

        # –ì—Ä—É–ø–ø–∞ 2: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        flow_group = create_group_box("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º")
        flow_group.setStyleSheet(flow_group.styleSheet() + "QGroupBox { color: #FFA500; }")
        flow_layout = QHBoxLayout(flow_group)
        flow_layout.setContentsMargins(4, 16, 4, 4)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        flow_layout.setSpacing(4)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø—ã
        self.btn_time_sleep = self._create_command_button("time.sleep", "–ü–∞—É–∑–∞",
                                                          Resources.get_icon_path("pause-pink"),
                                                          self.add_time_sleep_module)
        self.btn_restart_from = self._create_command_button("restart.from", "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –ø–æ–∑–∏—Ü–∏–∏",
                                                            Resources.get_icon_path("activity-blue"),
                                                            self.add_restart_from_module)
        self.btn_restart_from_last = self._create_command_button("restart.from.last", "–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è",
                                                                 Resources.get_icon_path("activity-orange"),
                                                                 self.add_restart_from_last_module)

        flow_layout.addWidget(self.btn_time_sleep)
        flow_layout.addWidget(self.btn_restart_from)
        flow_layout.addWidget(self.btn_restart_from_last)
        toolbar.addWidget(flow_group)

        # –ì—Ä—É–ø–ø–∞ 3: –î–µ–π—Å—Ç–≤–∏—è
        actions_group = create_group_box("–î–µ–π—Å—Ç–≤–∏—è")
        actions_group.setStyleSheet(actions_group.styleSheet() + "QGroupBox { color: #FFA500; }")
        actions_layout = QHBoxLayout(actions_group)
        actions_layout.setContentsMargins(4, 16, 4, 4)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        actions_layout.setSpacing(4)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–π –≥—Ä—É–ø–ø—ã
        self.btn_click = self._create_command_button("–ö–ª–∏–∫", "–ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º",
                                                     Resources.get_icon_path("click-ping"),
                                                     self.add_click_module)
        self.btn_swipe = self._create_command_button("–°–≤–∞–π–ø", "–°–≤–∞–π–ø –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º",
                                                     Resources.get_icon_path("swipe-blue"),
                                                     self.add_swipe_module)
        self.btn_image_search = self._create_command_button("–ü–æ–∏—Å–∫", "–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ",
                                                            Resources.get_icon_path("search-orange"),
                                                            self.add_image_search_module)

        actions_layout.addWidget(self.btn_click)
        actions_layout.addWidget(self.btn_swipe)
        actions_layout.addWidget(self.btn_image_search)
        toolbar.addWidget(actions_group)

        # –î–æ–±–∞–≤–ª—è–µ–º toolbar –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        layout.addLayout(toolbar)

    def _create_command_button(self, text, tooltip, icon_path, slot):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        button = create_dark_button(text, icon_path, slot, tooltip)
        button.setStyleSheet(button.styleSheet() + """
            QPushButton {
                font-size: 11px;
                padding: 3px 6px;
            }
        """)
        return button

    def add_module(self, module_type: str, description: str, data: dict = None):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
        index = len(self.modules)

        # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π ModuleItem —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        module_item = ModuleItem(index, module_type, description)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è
        if data:
            module_item.set_data(data)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        module_item.editRequested.connect(self.edit_module)
        module_item.deleteRequested.connect(self.delete_module)
        module_item.moveUpRequested.connect(self.move_module_up)
        module_item.moveDownRequested.connect(self.move_module_down)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ –Ω–∞ —Ö–æ–ª—Å—Ç
        self.modules.append(module_item)

        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–º—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–º
        self.canvas_layout.insertWidget(self.canvas_layout.count() - 1, module_item)

        # –ò—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª
        self.moduleAdded.emit(module_type, description, data or {})
        self.canvasChanged.emit()

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
        self._update_module_numbers()

        return index

    def _update_module_numbers(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –Ω–∞ —Ö–æ–ª—Å—Ç–µ"""
        for i, module in enumerate(self.modules):
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –º–æ–¥—É–ª—è
            module.update_index(i)

    def _redraw_modules(self):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏"""
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã —Å —Ö–æ–ª—Å—Ç–∞
        for module in self.modules:
            self.canvas_layout.removeWidget(module)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for module in self.modules:
            self.canvas_layout.insertWidget(self.canvas_layout.count() - 1, module)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
        self._update_module_numbers()

    def move_module_up(self, index: int):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –º–æ–¥—É–ª—å –≤–≤–µ—Ä—Ö"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤–∞–ª–∏–¥–Ω—ã–π –∏ –Ω–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if index <= 0 or index >= len(self.modules):
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏
        current_module = self.modules[index]
        previous_module = self.modules[index - 1]

        # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –≤ —Å–ø–∏—Å–∫–µ –º–æ–¥—É–ª–µ–π
        self.modules[index] = previous_module
        self.modules[index - 1] = current_module

        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self._redraw_modules()

        # –ò—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ö–æ–ª—Å—Ç–∞
        self.canvasChanged.emit()

    def move_module_down(self, index: int):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –º–æ–¥—É–ª—å –≤–Ω–∏–∑"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤–∞–ª–∏–¥–Ω—ã–π –∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        if index < 0 or index >= len(self.modules) - 1:
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏
        current_module = self.modules[index]
        next_module = self.modules[index + 1]

        # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –≤ —Å–ø–∏—Å–∫–µ –º–æ–¥—É–ª–µ–π
        self.modules[index] = next_module
        self.modules[index + 1] = current_module

        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self._redraw_modules()

        # –ò—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ö–æ–ª—Å—Ç–∞
        self.canvasChanged.emit()

    def delete_module(self, index: int):
        """–£–¥–∞–ª—è–µ—Ç –º–æ–¥—É–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º –∏–∑ —Ö–æ–ª—Å—Ç–∞"""
        if 0 <= index < len(self.modules):
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–∂–µ—Ç –º–æ–¥—É–ª—è
            module = self.modules[index]

            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            reply = QMessageBox.question(
                self,
                "–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è",
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å '{module.module_type}'?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )

            if reply == QMessageBox.StandardButton.Yes:
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Ö–æ–ª—Å—Ç–∞ –∏ —Å–ø–∏—Å–∫–∞
                self.canvas_layout.removeWidget(module)
                # –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥—É–ª—å
                module.hide()
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
                self.modules.pop(index)

                # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏, —á—Ç–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç –Ω—É–º–µ—Ä–∞—Ü–∏—é
                self._redraw_modules()

                # –ò—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
                self.moduleDeleted.emit(index)
                self.canvasChanged.emit()

    def edit_module(self, index: int):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –Ω–∞ —Ö–æ–ª—Å—Ç–µ"""
        if 0 <= index < len(self.modules):
            module = self.modules[index]
            module_type = module.module_type
            data = module.get_data()

            # –í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–¥—É–ª—è
            if module_type in ["close.game", "restart.emulator", "start.game", "restart.from.last"]:
                # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –º–æ–¥—É–ª–µ–π –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                QMessageBox.information(
                    self,
                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    f"–ú–æ–¥—É–ª—å {module_type} –Ω–µ –∏–º–µ–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."
                )
                return
            elif module_type == "time.sleep":
                self._edit_time_sleep_module(module, data)
            elif module_type == "restart.from":
                self._edit_restart_from_module(module, data)
            elif module_type == "–ö–ª–∏–∫":
                self._edit_click_module(module, data)
            elif module_type == "–°–≤–∞–π–ø":
                self._edit_swipe_module(module, data)
            elif module_type == "–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–∏–Ω–∫–∏":
                self._edit_image_search_module(module, data)
            else:
                print(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —Ç–∏–ø–∞ '{module_type}' –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")

    def _edit_time_sleep_module(self, module, data):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –ø–∞—É–∑—ã"""
        dialog = QDialog(self)
        dialog.setWindowTitle("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—É–∑—É")
        dialog.setModal(True)
        dialog.resize(300, 120)
        dialog.setStyleSheet(ACTIVITY_DIALOG_STYLE)

        layout = QVBoxLayout(dialog)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(6)

        # Spinner for time
        input_layout = QHBoxLayout()
        time_label = QLabel("–í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ (—Å–µ–∫):")
        time_spinner = create_double_spinbox_without_buttons(0.1, 300.0, data.get("time", 1.0), 1, " —Å–µ–∫")

        input_layout.addWidget(time_label)
        input_layout.addWidget(time_spinner)
        layout.addLayout(input_layout)

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        ok_btn = QPushButton("–û–ö")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        cancel_btn.setStyleSheet(MODULE_BUTTON_STYLE)
        ok_btn.setStyleSheet(MODULE_BUTTON_STYLE)

        cancel_btn.clicked.connect(dialog.reject)
        ok_btn.clicked.connect(dialog.accept)

        buttons_layout.addWidget(cancel_btn)
        buttons_layout.addWidget(ok_btn)
        buttons_layout.setContentsMargins(0, 8, 0, 0)

        layout.addLayout(buttons_layout)

        if dialog.exec():
            time_value = time_spinner.value()
            description = f"–ü–∞—É–∑–∞ {time_value} —Å–µ–∫ (time.sleep)"
            data["time"] = time_value

            module.description = description
            module.set_data(data)

            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
            self._redraw_modules()

            # –ò—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self.moduleEdited.emit(module.index, module.module_type, description, data)
            self.canvasChanged.emit()

    def _edit_restart_from_module(self, module, data):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å restart.from"""
        dialog = QDialog(self)
        dialog.setWindowTitle("–ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–æ —Å—Ç—Ä–æ–∫–∏")
        dialog.setModal(True)
        dialog.resize(300, 120)
        dialog.setStyleSheet(ACTIVITY_DIALOG_STYLE)

        layout = QVBoxLayout(dialog)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(6)

        # –°–ø–∏–Ω–Ω–µ—Ä –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏
        input_layout = QHBoxLayout()
        line_label = QLabel("–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏:")
        line_spinner = create_spinbox_without_buttons(1, 999, data.get("line", 1))

        input_layout.addWidget(line_label)
        input_layout.addWidget(line_spinner)
        layout.addLayout(input_layout)

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        ok_btn = QPushButton("–û–ö")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        cancel_btn.setStyleSheet(MODULE_BUTTON_STYLE)
        ok_btn.setStyleSheet(MODULE_BUTTON_STYLE)

        cancel_btn.clicked.connect(dialog.reject)
        ok_btn.clicked.connect(dialog.accept)

        buttons_layout.addWidget(cancel_btn)
        buttons_layout.addWidget(ok_btn)
        buttons_layout.setContentsMargins(0, 8, 0, 0)

        layout.addLayout(buttons_layout)

        if dialog.exec():
            line_number = line_spinner.value()
            description = f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–æ —Å—Ç—Ä–æ–∫–∏ {line_number} (restart.from)"
            data["line"] = line_number

            module.description = description
            module.set_data(data)

            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
            self._redraw_modules()

            # –ò—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self.moduleEdited.emit(module.index, module.module_type, description, data)
            self.canvasChanged.emit()

    def _edit_click_module(self, module, data):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –∫–ª–∏–∫–∞"""
        dialog = ClickModuleDialog(self)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞
        dialog.resize(380, 320)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å—Ç–∏–ª—å
        dialog.setStyleSheet(dialog.styleSheet() + """
            QToolTip {
                background-color: #2A2A2A;
                color: white;
                border: 1px solid #FFA500;
                padding: 2px;
            }
        """)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–æ–¥—É–ª—è
        dialog.load_data(data)

        if dialog.exec():
            new_data = dialog.get_data()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            description = f"–ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º ({new_data['x']}, {new_data['y']})"
            if new_data.get('description'):
                description += f" - {new_data['description']}"
            if new_data.get('sleep') > 0:
                description += f" —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {new_data['sleep']} —Å–µ–∫"

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è
            module.description = description
            module.set_data(new_data)

            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–æ–¥—É–ª–∏
            self._redraw_modules()

            # –ò—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self.moduleEdited.emit(module.index, module.module_type, description, new_data)
            self.canvasChanged.emit()

    def _edit_swipe_module(self, module, data):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å —Å–≤–∞–π–ø–∞"""
        dialog = SwipeModuleDialog(self)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞
        dialog.resize(380, 380)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å—Ç–∏–ª—å
        dialog.setStyleSheet(dialog.styleSheet() + """
            QToolTip {
                background-color: #2A2A2A;
                color: white;
                border: 1px solid #FFA500;
                padding: 2px;
            }
        """)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–æ–¥—É–ª—è
        dialog.load_data(data)

        if dialog.exec():
            new_data = dialog.get_data()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            description = f"–°–≤–∞–π–ø ({new_data['x1']}, {new_data['y1']}) ‚Üí ({new_data['x2']}, {new_data['y2']})"
            if new_data.get('description'):
                description += f" - {new_data['description']}"
            if new_data.get('sleep') > 0:
                description += f" —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {new_data['sleep']} —Å–µ–∫"

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è
            module.description = description
            module.set_data(new_data)

            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–æ–¥—É–ª–∏
            self._redraw_modules()

            # –ò—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self.moduleEdited.emit(module.index, module.module_type, description, new_data)
            self.canvasChanged.emit()

    def _edit_image_search_module(self, module, data):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏"""
        dialog = ImageSearchModuleDialog(self)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞
        dialog.resize(800, 600)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ç—É–ª—Ç–∏–ø–∞–º–∏
        dialog.setStyleSheet(dialog.styleSheet() + """
            QToolTip {
                background-color: #2A2A2A;
                color: white;
                border: 1px solid #FFA500;
                padding: 2px;
            }
        """)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è
        dialog.load_data(data)

        if dialog.exec():
            new_data = dialog.get_data()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è
            images_str = ", ".join(new_data.get("images", []))
            description = f"–ü–æ–∏—Å–∫: {images_str} (—Ç–∞–π–º–∞—É—Ç: {new_data.get('timeout', 120)} —Å–µ–∫)"

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è
            module.description = description
            module.set_data(new_data)

            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–æ–¥—É–ª–∏
            self._redraw_modules()

            # –ò—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self.moduleEdited.emit(module.index, module.module_type, description, new_data)
            self.canvasChanged.emit()

    def add_close_game_module(self):
        """Adds a close.game module to the canvas"""
        description = "–ó–∞–∫—Ä—ã—Ç—å –∏–≥—Ä—É (close.game)"
        data = {"type": "close_game"}
        self.add_module("close.game", description, data)

    def add_restart_emulator_module(self):
        """Adds a restart.emulator module to the canvas"""
        description = "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä (restart.emulator)"
        data = {"type": "restart_emulator"}
        self.add_module("restart.emulator", description, data)

    def add_start_game_module(self):
        """Adds a start.game module to the canvas"""
        description = "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É (start.game)"
        data = {"type": "start_game"}
        self.add_module("start.game", description, data)

    def add_time_sleep_module(self):
        """Adds a time.sleep module to the canvas"""
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –ø–∞—É–∑—É")
        dialog.setModal(True)
        dialog.resize(300, 120)
        dialog.setStyleSheet(ACTIVITY_DIALOG_STYLE)

        layout = QVBoxLayout(dialog)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(6)

        # Spinner for time
        input_layout = QHBoxLayout()
        time_label = QLabel("–í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ (—Å–µ–∫):")
        time_spinner = create_double_spinbox_without_buttons(0.1, 300.0, 1.0, 1, " —Å–µ–∫")

        input_layout.addWidget(time_label)
        input_layout.addWidget(time_spinner)
        layout.addLayout(input_layout)

        # Buttons
        buttons_layout = QHBoxLayout()
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        ok_btn = QPushButton("–û–ö")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        cancel_btn.setStyleSheet(MODULE_BUTTON_STYLE)
        ok_btn.setStyleSheet(MODULE_BUTTON_STYLE)

        cancel_btn.clicked.connect(dialog.reject)
        ok_btn.clicked.connect(dialog.accept)

        buttons_layout.addWidget(cancel_btn)
        buttons_layout.addWidget(ok_btn)
        buttons_layout.setContentsMargins(0, 8, 0, 0)

        layout.addLayout(buttons_layout)

        if dialog.exec():
            time_value = time_spinner.value()
            description = f"–ü–∞—É–∑–∞ {time_value} —Å–µ–∫ (time.sleep)"
            data = {"type": "time_sleep", "time": time_value}
            self.add_module("time.sleep", description, data)

    def add_restart_from_module(self):
        """Adds a restart.from module to the canvas"""
        dialog = QDialog(self)
        dialog.setWindowTitle("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–æ —Å—Ç—Ä–æ–∫–∏")
        dialog.setModal(True)
        dialog.resize(300, 120)
        dialog.setStyleSheet(ACTIVITY_DIALOG_STYLE)

        layout = QVBoxLayout(dialog)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(6)

        # Spinner for line number
        input_layout = QHBoxLayout()
        line_label = QLabel("–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏:")
        line_spinner = create_spinbox_without_buttons(1, 999, 1)

        input_layout.addWidget(line_label)
        input_layout.addWidget(line_spinner)
        layout.addLayout(input_layout)

        # Buttons
        buttons_layout = QHBoxLayout()
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        ok_btn = QPushButton("–û–ö")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        cancel_btn.setStyleSheet(MODULE_BUTTON_STYLE)
        ok_btn.setStyleSheet(MODULE_BUTTON_STYLE)

        cancel_btn.clicked.connect(dialog.reject)
        ok_btn.clicked.connect(dialog.accept)

        buttons_layout.addWidget(cancel_btn)
        buttons_layout.addWidget(ok_btn)
        buttons_layout.setContentsMargins(0, 8, 0, 0)

        layout.addLayout(buttons_layout)

        if dialog.exec():
            line_number = line_spinner.value()
            description = f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–æ —Å—Ç—Ä–æ–∫–∏ {line_number} (restart.from)"
            data = {"type": "restart_from", "line": line_number}
            self.add_module("restart.from", description, data)

    def add_restart_from_last_module(self):
        """Adds a restart.from.last module to the canvas"""
        description = "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏ (restart.from.last)"
        data = {"type": "restart_from_last"}
        self.add_module("restart.from.last", description, data)

    def add_click_module(self):
        """Adds a click module to the canvas"""
        dialog = ClickModuleDialog(self)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞
        dialog.resize(380, 320)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å—Ç–∏–ª—å –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç—É–ª—Ç–∏–ø—ã
        dialog.setStyleSheet(dialog.styleSheet() + """
            QToolTip {
                background-color: #2A2A2A;
                color: white;
                border: 1px solid #FFA500;
                padding: 2px;
            }
        """)

        if dialog.exec():
            data = dialog.get_data()
            description = f"–ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º ({data['x']}, {data['y']})"
            if data.get('description'):
                description += f" - {data['description']}"
            if data.get('sleep') > 0:
                description += f" —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {data['sleep']} —Å–µ–∫"

            self.add_module("–ö–ª–∏–∫", description, data)

    def add_swipe_module(self):
        """Adds a swipe module to the canvas"""
        dialog = SwipeModuleDialog(self)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞
        dialog.resize(380, 380)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å—Ç–∏–ª—å –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç—É–ª—Ç–∏–ø—ã
        dialog.setStyleSheet(dialog.styleSheet() + """
            QToolTip {
                background-color: #2A2A2A;
                color: white;
                border: 1px solid #FFA500;
                padding: 2px;
            }
        """)

        if dialog.exec():
            data = dialog.get_data()
            description = f"–°–≤–∞–π–ø ({data['x1']}, {data['y1']}) ‚Üí ({data['x2']}, {data['y2']})"
            if data.get('description'):
                description += f" - {data['description']}"
            if data.get('sleep') > 0:
                description += f" —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {data['sleep']} —Å–µ–∫"

            self.add_module("–°–≤–∞–π–ø", description, data)

    def add_image_search_module(self):
        """Adds an image search module to the canvas"""
        dialog = ImageSearchModuleDialog(self)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞
        dialog.resize(800, 600)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç—É–ª—Ç–∏–ø–∞–º–∏
        dialog.setStyleSheet(dialog.styleSheet() + """
            QToolTip {
                background-color: #2A2A2A;
                color: white;
                border: 1px solid #FFA500;
                padding: 2px;
            }
        """)

        if dialog.exec():
            data = dialog.get_data()

            # Create description for the module
            images_str = ", ".join(data.get("images", []))
            description = f"–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_str} (—Ç–∞–π–º–∞—É—Ç: {data.get('timeout', 120)} —Å–µ–∫)"

            self.add_module("–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–∏–Ω–∫–∏", description, data)

    def clear(self):
        """–û—á–∏—â–∞–µ—Ç —Ö–æ–ª—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º"""
        # –£–¥–∞–ª—è–µ–º –º–æ–¥—É–ª–∏ —Å —Ö–æ–ª—Å—Ç–∞
        for module in self.modules:
            self.canvas_layout.removeWidget(module)
            # –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥—É–ª—å
            module.hide()

        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π
        self.modules.clear()

        # –ò—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ö–æ–ª—Å—Ç–∞
        self.canvasChanged.emit()


class ActivityModuleDialog(QDialog):
    """
    –î–∏–∞–ª–æ–≥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Activity.
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.
    """

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Activity")
        self.setWindowFlags(self.windowFlags() | Qt.WindowType.WindowMinMaxButtonsHint)
        self.setModal(True)
        self.resize(800, 600)

        # State for fullscreen mode
        self.is_fullscreen = False
        self.normal_geometry = None
        self.setup_ui()

    def setup_ui(self):
        """Sets up the UI for the dialog"""
        layout = QVBoxLayout(self)
        layout.setSpacing(8)  # –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏

        # Apply general style
        self.setStyleSheet(ACTIVITY_DIALOG_STYLE)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã")
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setStyleSheet(ACTIVITY_MODULE_TITLE_STYLE)
        layout.addWidget(title_label)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–æ–≤–∫—É —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        main_layout = QHBoxLayout()

        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        left_column = QVBoxLayout()

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ - –≥—Ä—É–ø–ø–∞
        launch_group = create_group_box("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞")
        launch_layout = QFormLayout(launch_group)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º FormLayout –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        launch_layout.setContentsMargins(8, 12, 8, 8)
        launch_layout.setSpacing(6)

        # –ò–≥—Ä–∞
        self.game_combo = QComboBox()
        self.game_combo.setStyleSheet("""
            QComboBox {
                background-color: #2A2A2A;
                color: white;
                border: 1px solid #555;
                border-radius: 3px;
                padding: 4px;
            }
            QComboBox QAbstractItemView {
                background-color: #2A2A2A;
                color: white;
                border: 1px solid #555;
            }
        """)
        self.game_combo.currentIndexChanged.connect(self.update_activity_info)
        launch_layout.addRow("–ò–≥—Ä–∞:", self.game_combo)

        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        self.activity_info = QLineEdit()
        self.activity_info.setReadOnly(True)
        self.activity_info.setStyleSheet("background-color: #333; color: white;")
        launch_layout.addRow("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:", self.activity_info)

        # –ó–∞–¥–µ—Ä–∂–∫–∞
        self.time_sleep_input = create_double_spinbox_without_buttons(0.0, 300.0, 1.0, 1, " —Å–µ–∫")
        launch_layout.addRow("–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º (—Å–µ–∫):", self.time_sleep_input)

        left_column.addWidget(launch_group)

        # –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è - –≥—Ä—É–ø–ø–∞
        status_group = create_group_box("–°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è")
        status_layout = QVBoxLayout(status_group)
        status_layout.setContentsMargins(8, 12, 8, 8)
        status_layout.setSpacing(6)

        # –í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        self.enable_check = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        self.enable_check.setChecked(True)
        self.enable_check.setStyleSheet("""
            QCheckBox {
                color: white;
                spacing: 5px;
            }
            QCheckBox::indicator {
                width: 14px;
                height: 14px;
            }
        """)
        status_layout.addWidget(self.enable_check)

        # –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–æ–∫
        line_range_layout = QHBoxLayout()
        line_range_label = QLabel("–î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–æ–∫:")
        self.line_range_input = QLineEdit()
        self.line_range_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: 1-50,60-100")
        self.line_range_input.setStyleSheet("""
            background-color: #2A2A2A;
            color: white;
            border: 1px solid #555;
            border-radius: 3px;
            padding: 4px;
        """)
        line_range_layout.addWidget(line_range_label)
        line_range_layout.addWidget(self.line_range_input, 1)
        status_layout.addLayout(line_range_layout)

        left_column.addWidget(status_group)

        # –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –≤—ã–ª–µ—Ç–µ –∏–≥—Ä—ã
        action_group = create_group_box("–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –≤—ã–ª–µ—Ç–µ –∏–≥—Ä—ã")
        action_layout = QVBoxLayout(action_group)
        action_layout.setContentsMargins(8, 12, 8, 8)
        action_layout.setSpacing(6)

        # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        action_combo_layout = QHBoxLayout()
        action_label = QLabel("–î–µ–π—Å—Ç–≤–∏–µ:")
        self.action_combo = QComboBox()
        self.action_combo.setStyleSheet("""
            QComboBox {
                background-color: #2A2A2A;
                color: white;
                border: 1px solid #555;
                border-radius: 3px;
                padding: 4px;
            }
            QComboBox QAbstractItemView {
                background-color: #2A2A2A;
                color: white;
                border: 1px solid #555;
            }
        """)
        self.action_combo.addItems([
            "continue_bot - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
            "activity.running.clear(0) - –ó–∞–∫—Ä—ã—Ç—å —ç–º—É–ª—è—Ç–æ—Ä",
            "activity.running.clear(1) - –ó–∞–∫—Ä—ã—Ç—å —ç–º—É–ª—è—Ç–æ—Ä –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π"
        ])
        self.action_combo.currentIndexChanged.connect(self.update_ui_based_on_action)
        action_combo_layout.addWidget(action_label)
        action_combo_layout.addWidget(self.action_combo, 1)
        action_layout.addLayout(action_combo_layout)

        left_column.addWidget(action_group)
        left_column.addStretch(1)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–Ω–∏–∑—É

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
        main_layout.addLayout(left_column, 1)  # 1 - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞

        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ö–æ–ª—Å—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–ª–µ—Ç–∞
        right_column = QVBoxLayout()

        # Canvas –¥–ª—è continue_bot
        right_label = create_text_label("–†–µ–¥–∞–∫—Ç–æ—Ä –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–ª–µ—Ç–∞ –∏–≥—Ä—ã", "color: #FFA500; font-weight: bold;")
        right_column.addWidget(right_label)

        self.continue_canvas = ActivityCanvasModule(self)
        self.continue_canvas.setVisible(True)  # Initially visible
        right_column.addWidget(self.continue_canvas, 1)  # 1 - —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤—É—é –∫–æ–ª–æ–Ω–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
        main_layout.addLayout(right_column, 2)  # 2 - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ (–±–æ–ª—å—à–µ —á–µ–º –ª–µ–≤–∞—è)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–Ω–æ–≤–∫—É
        layout.addLayout(main_layout, 1)  # 1 - —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        self.btn_cancel = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.btn_confirm = QPushButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.btn_cancel.setStyleSheet(MODULE_BUTTON_STYLE)
        self.btn_confirm.setStyleSheet(MODULE_BUTTON_STYLE)

        self.btn_cancel.clicked.connect(self.reject)
        self.btn_confirm.clicked.connect(self.accept)
        buttons_layout.addWidget(self.btn_cancel)
        buttons_layout.addWidget(self.btn_confirm)
        layout.addLayout(buttons_layout)

        # Load games
        self.load_games()

        # Initialize UI based on initial action selection
        self.update_ui_based_on_action(0)

    def load_games(self):
        """Loads games from configuration"""
        try:
            # Add a default "Select game" option
            self.game_combo.addItem("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É")

            # Try to load games from config
            if os.path.exists('config/games_activities.json'):
                with open('config/games_activities.json', 'r', encoding='utf-8') as f:
                    games_activities = json.load(f)
                    for game in games_activities.keys():
                        self.game_combo.addItem(game)
        except Exception as e:
            print(f"Error loading games: {e}")

    def update_activity_info(self, index):
        """Updates activity info based on selected game"""
        if index <= 0:  # "Select game" or no selection
            self.activity_info.setText("")
            return

        try:
            game = self.game_combo.currentText()
            if os.path.exists('config/games_activities.json'):
                with open('config/games_activities.json', 'r', encoding='utf-8') as f:
                    games_activities = json.load(f)
                    if game in games_activities:
                        self.activity_info.setText(games_activities[game])
                    else:
                        self.activity_info.setText("")
        except Exception as e:
            print(f"Error updating activity info: {e}")
            self.activity_info.setText("")

    def update_ui_based_on_action(self, index):
        """Updates UI based on selected action"""
        self.continue_canvas.setVisible(index == 0)  # Only show canvas for continue_bot (index 0)
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–æ
        if index != 0:
            info_label = QLabel("–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            info_label.setStyleSheet("color: white; background-color: #2A2A2A; padding: 10px; border-radius: 5px;")
            info_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            if not hasattr(self, 'info_label'):
                self.info_label = info_label
                self.continue_canvas.layout().addWidget(info_label)
            else:
                self.info_label.setVisible(index != 0)
        elif hasattr(self, 'info_label'):
            self.info_label.setVisible(False)

    def get_data(self) -> Dict[str, Any]:
        """Returns the data entered by the user"""
        action_index = self.action_combo.currentIndex()
        action_type = ["continue_bot", "activity.running.clear(0)", "activity.running.clear(1)"][action_index]

        data = {
            "type": "activity",
            "enabled": self.enable_check.isChecked(),
            "action": action_type,
            "line_range": self.line_range_input.text().strip(),
            "game": self.game_combo.currentText() if self.game_combo.currentIndex() > 0 else "",
            "activity": self.activity_info.text(),
            "startup_delay": self.time_sleep_input.value()
        }

        # Add continue_bot options if that action is selected
        if action_type == "continue_bot":
            data["continue_options"] = self.continue_canvas.get_modules_data()

        return data